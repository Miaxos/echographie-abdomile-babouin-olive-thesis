.s1emc7v7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex:1;-ms-flex:1;flex:1;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;padding:20px;padding-top:60px;}
.c16f7kqh{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;max-width:1000px;-webkit-flex:1;-ms-flex:1;flex:1;}
.i1thhr4o{width:100%;border:2px solid #75052d;border-radius:5px;}
.e4vrwsk{font-size:18px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;background-color:#f5f5f5;padding:5px;border-radius:5px;-webkit-flex:1;-ms-flex:1;flex:1;}
.l1eeg4oz{color:#75052d;}
.a1yfdiqv{font-size:12px;margin-bottom:5px;}
.i1akipu5{margin:10px;}
.pq2p1yi{margin-top:5px;margin-bottom:5px;padding:5px;}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbnRob255Z3JpZmZvbi9EZXYvbWF1ZC10aGVzaXMvc3JjL3BhZ2VzL0ZvaWUvRGF0YS50c3giXSwibmFtZXMiOlsiLnMxZW1jN3Y3IiwiLmMxNmY3a3FoIiwiLmkxdGhocjRvIiwiLmU0dnJ3c2siLCIubDFlZWc0b3oiLCIuYTF5ZmRpcXYiLCIuaTFha2lwdTUiLCIucHEycDF5aSJdLCJtYXBwaW5ncyI6IkFBYU1BO0FBT0FDO0FBT0FDO0FBTUFDO0FBVUFDO0FBSUFDO0FBS0FDO0FBSUFDIiwiZmlsZSI6Ii9Vc2Vycy9hbnRob255Z3JpZmZvbi9EZXYvbWF1ZC10aGVzaXMvc3JjL3BhZ2VzL0ZvaWUvRGF0YS50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llc1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGluYXJpYSc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgVGl0bGUgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9UaXRsZSc7XG5pbXBvcnQgeyBTcGFjaW5nIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9TcGFjaW5nJztcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBtZXN1cmVmb2llMSBmcm9tICcuLi8uLi9hc3NldHMvbWVzdXJlZm9pZTEucG5nJztcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBtZXN1cmVmb2llMiBmcm9tICcuLi8uLi9hc3NldHMvbWVzdXJlZm9pZTIucG5nJztcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBtZXN1cmVmb2llMyBmcm9tICcuLi8uLi9hc3NldHMvbWVzdXJlZm9pZTMucG5nJztcblxuY29uc3Qgc3R5bGUgPSBjc3NgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXg6IDE7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBwYWRkaW5nOiAyMHB4O1xuICBwYWRkaW5nLXRvcDogNjBweDtcbmA7XG5jb25zdCBjb250ZW50ID0gY3NzYFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBtYXgtd2lkdGg6IDEwMDBweDtcbiAgZmxleDogMTtcbmA7XG5cbmNvbnN0IGltYWdlTWVzdXJlID0gY3NzYFxuICB3aWR0aDogMTAwJTtcbiAgYm9yZGVyOiAycHggc29saWQgIzc1MDUyZDtcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xuYDtcblxuY29uc3QgZXhwbGljYXRpb24gPSBjc3NgXG4gIGZvbnQtc2l6ZTogMThweDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjVmNTtcbiAgcGFkZGluZzogNXB4O1xuICBib3JkZXItcmFkaXVzOiA1cHg7XG4gIGZsZXg6IDE7XG5gO1xuXG5jb25zdCBsaW5rU3R5bGUgPSBjc3NgXG4gIGNvbG9yOiAjNzUwNTJkO1xuYDtcblxuY29uc3QgYXJpYW5lID0gY3NzYFxuICBmb250LXNpemU6IDEycHg7XG4gIG1hcmdpbi1ib3R0b206IDVweDtcbmA7XG5cbmNvbnN0IGltYWdlQ29udGFpbmVyID0gY3NzYFxuICBtYXJnaW46IDEwcHg7XG5gO1xuXG5jb25zdCBwYXJhZ3JhcGggPSBjc3NgXG4gIG1hcmdpbi10b3A6IDVweDtcbiAgbWFyZ2luLWJvdHRvbTogNXB4O1xuICBwYWRkaW5nOiA1cHg7XG5gO1xuXG5jb25zdCBJbWFnZVdpdGhMZWdlbmQgPSAoeyBzcmMsIGxhYmVsIH06IHsgc3JjOiBzdHJpbmc7IGxhYmVsPzogc3RyaW5nIH0pID0+IChcbiAgPGRpdiBjbGFzc05hbWU9e2ltYWdlQ29udGFpbmVyfT5cbiAgICA8aW1nIHNyYz17c3JjfSBhbHQ9XCJyZWlucyBiYWJvdWluIG9saXZlXCIgY2xhc3NOYW1lPXtpbWFnZU1lc3VyZX0gLz5cbiAgICB7bGFiZWwgJiYgKFxuICAgICAgPGRpdiBzdHlsZT17eyBjb2xvcjogJ2dyZXknLCB0ZXh0QWxpZ246ICdjZW50ZXInIH19PlxuICAgICAgICA8aT57bGFiZWx9PC9pPlxuICAgICAgPC9kaXY+XG4gICAgKX1cbiAgPC9kaXY+XG4pO1xuXG5jb25zdCBGb2llRGF0YSA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGV9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2NvbnRlbnR9PlxuICAgICAgICA8VGl0bGU+XG4gICAgICAgICAgRXhhbWVuIMOpY2hvZ3JhcGhpcXVlIGRlIGwnYXBwYXJlaWwgZXh0cmEtZGlnZXN0aWYgZHUgYmFib3VpbiBvbGl2ZXsnICd9XG4gICAgICAgICAgPGk+KFBhcGlvIGFudWJpcyk8L2k+XG4gICAgICAgIDwvVGl0bGU+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXthcmlhbmV9PlxuICAgICAgICAgIDxMaW5rIHRvPVwiL1wiIGNsYXNzTmFtZT17bGlua1N0eWxlfT5cbiAgICAgICAgICAgIEFjY3VlaWxcbiAgICAgICAgICA8L0xpbms+eycgJ31cbiAgICAgICAgICAveycgJ31cbiAgICAgICAgICA8TGluayB0bz1cImV4dHJhZGlnZXN0aWZcIiBjbGFzc05hbWU9e2xpbmtTdHlsZX0+XG4gICAgICAgICAgICBFeGFtZW4gw6ljaG9ncmFwaGlxdWUgZGUgbCdhcHBhcmVpbCBleHRyYS1kaWdlc3RpZiBkdSBiYWJvdWluIG9saXZlXG4gICAgICAgICAgPC9MaW5rPnsnICd9XG4gICAgICAgICAgLyBEb25uw6llcyDDqWNob2dyYXBoaXF1ZSBkdSBmb2llXG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8U3BhY2luZy5IZWlnaHQuTSAvPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17ZXhwbGljYXRpb259PlxuICAgICAgICAgIDxoMz5SYXBwb3J0IGV0IHRvcG9ncmFwaGllPC9oMz5cbiAgICAgICAgICA8cCBjbGFzc05hbWU9e3BhcmFncmFwaH0+XG4gICAgICAgICAgICBMZSBmb2llIHJlcG9zZSBzdXIgbGUgZGlhcGhyYWdtZSBxdWkgYXBwYXJhacyCdCBzb3VzIGxhIGZvcm1lIGTigJl1bmVcbiAgICAgICAgICAgIGxpZ25lIGh5cGVyZcyBY2hvZ2XMgG5lIGNyYcyCbmlhbGUuXG4gICAgICAgICAgPC9wPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT17cGFyYWdyYXBofT5cbiAgICAgICAgICAgIExlIGZvaWUgZ2F1Y2hlIGVzdCBjcmHMgm5pYWwgYcyAIGzigJllc3RvbWFjIGV0IGVzdCBzaXR1ZcyBIHNvdXMgbGVzIGNvzIJ0ZXMsXG4gICAgICAgICAgICBzaSBiaWVuIHF14oCZaWwgbuKAmWVzdCBleGFtaW5hYmxlIHF14oCZZW4gY2FzIGRlIGRpbGF0YXRpb24gZmFpYmxlIGHMgFxuICAgICAgICAgICAgbW9kZcyBcmXMgWUgZGUgbOKAmWVzdG9tYWMuXG4gICAgICAgICAgPC9wPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT17cGFyYWdyYXBofT5cbiAgICAgICAgICAgIExlIGxvYmUgZHJvaXQgZHUgZm9pZSBlc3QgbGUgcGx1cyBpbXBvcnRhbnQgZXQgZXN0IGNhdWRhbGVtZW50IGVuXG4gICAgICAgICAgICBjb250YWN0IGRpcmVjdCBhdmVjIGxlIHBvzIJsZSBjcmHMgm5pYWwgZHUgcmVpbiBkcm9pdC5cbiAgICAgICAgICA8L3A+XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPXtwYXJhZ3JhcGh9PlxuICAgICAgICAgICAgTGUgbG9iZSBjYXVkZcyBIGVzdCBzZcyBcGFyZcyBIGVuIGRldXggbG9iZXMgOiBsZSBwcm9jZXNzdXMgY2F1ZGXMgSByZWNvdXZyZVxuICAgICAgICAgICAgdmVudHJhbGVtZW50IGxhIHZlaW5lIGNhdmUgY2F1ZGFsZSwgbGEgZ2xhbmRlIHN1cnJlzIFuYWxlIGRyb2l0ZSBldCBsZVxuICAgICAgICAgICAgcG/MgmxlIGNyYcyCbmlvLXZlbnRyby1tZcyBZGlhbCBkdSByZWluIGRyb2l0IDsgbGUgcHJvY2Vzc3VzIHBhcGlsbGFpcmVcbiAgICAgICAgICAgIGVudG91cmUgZG9yc2FsZW1lbnQgbGEgcG9ydGUgZHUgZm9pZS5cbiAgICAgICAgICA8L3A+XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPXtwYXJhZ3JhcGh9PlxuICAgICAgICAgICAgQXV4IGFsZW50b3VycyBkZSBsYSBwb3J0ZSBkdSBmb2llLCBvbiByZXRyb3V2ZSBsYSB2ZWluZSBjYXZlXG4gICAgICAgICAgICBjYXVkYWxlLCBsYSB2ZWluZSBwb3J0ZSwgbGUgcGFuY3JlzIFhcyBldCBsZSBkdW9kZcyBbnVtLiBMYSBnbGFuZGVcbiAgICAgICAgICAgIHN1cnJlzIFuYWxlIGRyb2l0ZSBlc3QgZcyBZ2FsZW1lbnQgZW4gY29udGFjdCBjb25zdGFudCBhdmVjIGxlIGxvYmVcbiAgICAgICAgICAgIGRyb2l0IGR1IGZvaWUuXG4gICAgICAgICAgPC9wPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT17cGFyYWdyYXBofT5cbiAgICAgICAgICAgIExlcyBkaWZmZcyBcmVudHMgbG9iZXMgaGXMgXBhdGlxdWVzIG5lIHNvbnQgcGFzIGluZGl2aWR1YWxpc2FibGVzLCBzYXVmXG4gICAgICAgICAgICBlbiBjYXMgZOKAmWXMgXBhbmNoZW1lbnQgcGXMgXJpdG9uZcyBYWwuIERlIGzigJllzIFwYW5jaGVtZW50IGVzdCBmcsOpcXVlbW1lbnRcbiAgICAgICAgICAgIG9ic2VydmXMgSBsZSBsb25nIGR1IGRpYXBocmFnbWUsIGNoZXogbGVzIG3DomxlcyBub3RhbW1lbnQuXG4gICAgICAgICAgPC9wPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT17cGFyYWdyYXBofT5cbiAgICAgICAgICAgIExlIGR1b2RlzIFudW0gc+KAmW9ic2VydmUgYcyAIGdhdWNoZSBkZSBsYSB2ZcyBc2ljdWxlIGJpbGlhaXJlLlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8cCBjbGFzc05hbWU9e3BhcmFncmFwaH0+XG4gICAgICAgICAgICBFbiBjb3VwZSBpbnRlcmNvc3RhbGUsIGxhIHZlzIFzaWN1bGUgYmlsaWFpcmUgbmUgdG91Y2hlIHBhc1xuICAgICAgICAgICAgc3lzdGXMgW1hdGlxdWVtZW50IGxhIG1hcmdlIHZlbnRyYWxlIGR1IGZvaWUuIElsIGVzdCBmcmXMgXF1ZW50XG4gICAgICAgICAgICBk4oCZb2JzZXJ2ZXIgZGVzIGltYWdlcyBkZSBjbG9pc29ucyBhdSBzZWluIGRlIGxhIHZlzIFzaWN1bGUgcXVpXG4gICAgICAgICAgICBjb3JyZXNwb25kZW50IGF1eCByZXBsaXMgZGUgY2V0dGUgZGVybmllzIByZVxuICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8cCBjbGFzc05hbWU9e3BhcmFncmFwaH0+XG4gICAgICAgICAgICBDYXVkYWxlbWVudCwgZWxsZSBkZcyBcGFzc2UgcmXMgWd1bGllzIByZW1lbnQgbGUgcmVpbiBnYXVjaGVcbiAgICAgICAgICA8L3A+XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPXtwYXJhZ3JhcGh9PlxuICAgICAgICAgICAgTGEgcGx1cGFydCBkdSB0ZW1wcywgbGEgcXVldWUgZHUgcGFuY3JlzIFhcyBzZSByZXRyb3V2ZSBlbnRyZSBsYSBmYWNlXG4gICAgICAgICAgICBjYXVkby1tZcyBZGlhbGUgZGUgbGEgcmF0ZSBldCBsZSBwb8yCbGUgY3JhzIJuaWFsIGR1IHJlaW4gZ2F1Y2hlLlxuICAgICAgICAgICAgVG91dGVmb2lzLCBsYSBiYXNlIGRlIGxhIHJhdGUgZXN0IHJlbGF0aXZlbWVudCBtb2JpbGUgZXQgZWxsZSBu4oCZZXN0XG4gICAgICAgICAgICBwYXMgc3lzdGXMgW1hdGlxdWVtZW50IGVuIGNvbnRhY3QgYXZlYyBsZSBwYW5jcmXMgWFzLlxuICAgICAgICAgIDwvcD5cblxuICAgICAgICAgIDxoMz5Gb3JtZSBldCBhc3BlY3QgZGUgbOKAmW9yZ2FuZTo8L2gzPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT17cGFyYWdyYXBofT5cbiAgICAgICAgICAgIExhIHRhaWxsZSBkdSBmb2llIGVzdCBlzIF2YWx1ZcyBZSBzdWJqZWN0aXZlbWVudCA6IHVuIGZvaWUgbm9ybWFsXG4gICAgICAgICAgICBwcmXMgXNlbnRlIGRlcyBib3JkcyBwb2ludHVzLCB1biBsb2JlIGdhdWNoZSBmaW4sIGxvbmdlYW50IGxlXG4gICAgICAgICAgICBkaWFwaHJhZ21lIGV0IGRpZmZpY2lsZW1lbnQgb2JzZXJ2YWJsZSwgZXQgdW4gcmVjb3V2cmVtZW50IHBhcnRpZWxcbiAgICAgICAgICAgIGR1IHBvzIJsZSBjcmHMgm5pYWwgZHUgcmVpbiBkcm9pdC5cbiAgICAgICAgICA8L3A+XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPXtwYXJhZ3JhcGh9PlxuICAgICAgICAgICAgTGUgcGFyZW5jaHltZSBoZcyBcGF0aXF1ZSBhIHVuIGFzcGVjdCBlzIFjaG9ncmFwaGlxdWUgaGXMgXRlzIFyb2dlzIBuZSxcbiAgICAgICAgICAgIGTigJllzIFjaG9zdHJ1Y3R1cmUgZ3Jvc3NpZcyAcmVtZW50IGdyYW51bGV1c2UgYXZlYyBkZXMgZm95ZXJzXG4gICAgICAgICAgICBoeXBlcmXMgWNob2dlzIBuZXMuXG4gICAgICAgICAgPC9wPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT17cGFyYWdyYXBofT5cbiAgICAgICAgICAgIExhIHZlzIFzaWN1bGUgYmlsaWFpcmUgcGV1dCBwcmXMgXNlbnRlciB1biBjb250ZW51IGFuZcyBY2hvZ2XMgG5lLCBkZXNcbiAgICAgICAgICAgIGxpdGhpYXNlcyBiaWxpYWlyZXMgb3UgZGUgbGEgYm91ZSBiaWxpYWlyZS4gTGVzIGxpdGhpYXNlcyBiaWxpYWlyZXNcbiAgICAgICAgICAgIHNlIHByZcyBc2VudGVudCBzb3VzIGxhIGZvcm1lIGRlIHN0cnVjdHVyZXMgaHlwZXJlzIFjaG9nZcyAbmVzXG4gICAgICAgICAgICByZXNwb25zYWJsZXMgZOKAmXVuIGNvzIJuZSBk4oCZb21icmUuIExhIGJvdWUgYmlsaWFpcmUgYXBwYXJhacyCdCBzb3VzIGxhXG4gICAgICAgICAgICBmb3JtZSBkZSBjb250ZW51IHNlzIFkaW1lbnRhaXJlIGXMgWNob2dlzIBuZSBldCBtb2JpbGUuIExlcyBsaXRoaWFzZXNcbiAgICAgICAgICAgIGJpbGlhaXJlcyBzZW1ibGVudCBmcsOpcXVlbnRlcyBjaGV6IGxlcyBtw6JsZXMuXG4gICAgICAgICAgPC9wPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT17cGFyYWdyYXBofT5cbiAgICAgICAgICAgIEVuZmluLCBpbCBlc3QgZnJlzIFxdWVudCBk4oCZb2JzZXJ2ZXIgZGVzIGFydGXMgWZhY3RzIGRlIHJlbmZvcmNlbWVudFxuICAgICAgICAgICAgcG9zdGXMgXJpZXVyIG91IGRlIGxvYmUgYWNjZXNzb2lyZSBhdSBuaXZlYXUgZGUgbGEgdmXMgXNpY3VsZSBiaWxpYWlyZS5cbiAgICAgICAgICAgIERlIHBsdXMsIGlsIGVzdCBwb3NzaWJsZSBkZSB2aXN1YWxpc2VyIGxlIG1lzIJtZSB0eXBlIGTigJlhcnRlzIFmYWN0cyBkZVxuICAgICAgICAgICAgcmXMgXZlcmJlzIFyYXRpb24gcXXigJlhdSBuaXZlYXUgZGUgbOKAmWVzdG9tYWMgb3UgZGUgbGEgdmVzc2llLCBsaWXMgXMgYcyAIHVuZVxuICAgICAgICAgICAgaHlwZXJyZcyBZmxlY3Rpdml0ZcyBIGFjb3VzdGlxdWUgZHUgcGXMgXJpdG9pbmUuXG4gICAgICAgICAgPC9wPlxuXG4gICAgICAgICAgPGgzPkNvbXBhcmFpc29uIGTigJnDqWNob2fDqW5pY2l0w6k8L2gzPlxuICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgTGEgcGFyZW5jaHltZSBow6lwYXRpcXVlIGVzdCBoeXBvLSBhzIAgaXNvZcyBY2hvZ2XMgG5lIHBhciByYXBwb3J0IGF1XG4gICAgICAgICAgICAgIGNvcnRleCByZcyBbmFsIGRyb2l0IGFkamFjZW50LlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgTGVzIHBhcm9pcyBkZXMgdmFpc3NlYXV4IHBvcnRlcyBhcHBhcmFpc3NlbnQgaHlwZXJlzIFjaG9nZcyAbmVzIGF1XG4gICAgICAgICAgICAgIHNlaW4gZHUgcGFyZW5jaHltZSwgY2UgcXVpIHBlcm1ldCBkZSBsZXMgZGlmZmXMgXJlbmNpZXIgZGVzIHZlaW5lc1xuICAgICAgICAgICAgICBoZcyBcGF0aXF1ZXMuIERlIHBsdXMsIGxhIHZhc2N1bGFyaXNhdGlvbiBwb3J0ZSBlc3QgdmVudHJhbGUgdGFuZGlzXG4gICAgICAgICAgICAgIHF1ZSBsZXMgdmVpbmVzIGhlzIFwYXRpcXVlcyBzb250IGRvcnNhbGVzLnsnICd9XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICBMYSBwYXJvaSBkZSBsYSB2ZcyBc2ljdWxlIGJpbGlhaXJlIGVzdCBoeXBlcmXMgWNob2dlzIBuZSBjb21wYXJlzIFlIGF1XG4gICAgICAgICAgICAgIHBhcmVuY2h5bWUgaGXMgXBhdGlxdWUuXG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgIDwvdWw+XG5cbiAgICAgICAgICA8aDM+TWVzdXJlczwvaDM+XG4gICAgICAgICAgPHVsPlxuICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICBMZXMgbWVzdXJlcyBkZXMgZGlhbWXMgHRyZXMgZGUgbGEgdmVpbmUgcG9ydGUgZXQgZGUgbGEgdmVpbmUgY2F2ZVxuICAgICAgICAgICAgICBjYXVkYWxlIG9udCBlzIF0ZcyBIGVmZmVjdHVlzIFlcyBhdSBuaXZlYXUgZGUgbGEgcG9ydGUgZHUgZm9pZSwgZW4gY291cGVcbiAgICAgICAgICAgICAgbG9uZ2l0dWRpbmFsZS4gQ2UgdHlwZSBkZSBjb3VwZSBleHBvc2UgbOKAmW9wZcyBcmF0ZXVyIGHMgCB1biByaXNxdWUgZGVcbiAgICAgICAgICAgICAgc291cy1lc3RpbWF0aW9ucyBkZXMgZGlhbWXMgHRyZXMgdmFzY3VsYWlyZXMueycgJ31cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgIExhIHZlaW5lIGhlzIFwYXRpcXVlIG1lzIFkaWFsZSBhIHF1YW50IGHMgCBlbGxlIGXMgXRlzIEgbWVzdXJlzIFlIGF1IG5pdmVhdSBkZVxuICAgICAgICAgICAgICBzYSBjb25mbHVlbmNlIGF2ZWMgbGEgdmVpbmUgY2F2ZSBjYXVkYWwuXG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICBM4oCZZcyBcGFpc3NldXIgZGUgbGEgcGFyb2kgdsOpc2ljdWxhaXJlIGVzdCBtZXN1cmXMgWUgZG9yc2FsZW1lbnQuXG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgPEltYWdlV2l0aExlZ2VuZCBzcmM9e21lc3VyZWZvaWUxfSAvPlxuICAgICAgICAgIDxJbWFnZVdpdGhMZWdlbmQgc3JjPXttZXN1cmVmb2llMn0gLz5cbiAgICAgICAgICA8SW1hZ2VXaXRoTGVnZW5kIHNyYz17bWVzdXJlZm9pZTN9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBGb2llRGF0YTtcbiJdfQ==*/
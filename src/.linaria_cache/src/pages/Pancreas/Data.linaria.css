.swmgrx8{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex:1;-ms-flex:1;flex:1;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;padding:20px;padding-top:60px;}
.c17i3dlw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;max-width:1000px;-webkit-flex:1;-ms-flex:1;flex:1;}
.epperqy{font-size:18px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;background-color:#f5f5f5;padding:5px;border-radius:5px;-webkit-flex:1;-ms-flex:1;flex:1;}
.lvuzyes{color:#75052d;}
.abpqxop{font-size:12px;margin-bottom:5px;}
.p1apof4r{margin-top:5px;margin-bottom:5px;padding:5px;}
.i16uv2ud{margin:10px;}
.i1oy28yj{width:100%;border:2px solid #75052d;border-radius:5px;}
/*# sourceMappingURL=data:application/json;base64,*/
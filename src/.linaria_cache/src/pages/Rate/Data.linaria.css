.s1w7r83w{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex:1;-ms-flex:1;flex:1;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;padding:20px;padding-top:60px;}
.c31dw9l{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;max-width:1000px;-webkit-flex:1;-ms-flex:1;flex:1;}
.i1reljtw{width:100%;border:2px solid #75052d;border-radius:5px;}
.e1vbiwo4{font-size:18px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;background-color:#f5f5f5;padding:5px;border-radius:5px;-webkit-flex:1;-ms-flex:1;flex:1;}
.lixojjk{color:#75052d;}
.abfizqc{font-size:12px;margin-bottom:5px;}
.i2zfej{margin:10px;}
.p14m5qhn{margin-top:5px;margin-bottom:5px;padding:5px;}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbnRob255Z3JpZmZvbi9EZXYvbWF1ZC10aGVzaXMvc3JjL3BhZ2VzL1JhdGUvRGF0YS50c3giXSwibmFtZXMiOlsiLnMxdzdyODN3IiwiLmMzMWR3OWwiLCIuaTFyZWxqdHciLCIuZTF2Yml3bzQiLCIubGl4b2pqayIsIi5hYmZpenFjIiwiLmkyemZlaiIsIi5wMTRtNXFobiJdLCJtYXBwaW5ncyI6IkFBV01BO0FBT0FDO0FBT0FDO0FBTUFDO0FBVUFDO0FBSUFDO0FBS0FDO0FBSUFDIiwiZmlsZSI6Ii9Vc2Vycy9hbnRob255Z3JpZmZvbi9EZXYvbWF1ZC10aGVzaXMvc3JjL3BhZ2VzL1JhdGUvRGF0YS50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llc1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGluYXJpYSc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgVGl0bGUgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9UaXRsZSc7XG5pbXBvcnQgeyBTcGFjaW5nIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9TcGFjaW5nJztcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBtZXN1cmVyYXRlMSBmcm9tICcuLi8uLi9hc3NldHMvbWVzdXJlcmF0ZTEucG5nJztcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBtZXN1cmVyYXRlMiBmcm9tICcuLi8uLi9hc3NldHMvbWVzdXJlcmF0ZTIucG5nJztcblxuY29uc3Qgc3R5bGUgPSBjc3NgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXg6IDE7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBwYWRkaW5nOiAyMHB4O1xuICBwYWRkaW5nLXRvcDogNjBweDtcbmA7XG5jb25zdCBjb250ZW50ID0gY3NzYFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBtYXgtd2lkdGg6IDEwMDBweDtcbiAgZmxleDogMTtcbmA7XG5cbmNvbnN0IGltYWdlTWVzdXJlID0gY3NzYFxuICB3aWR0aDogMTAwJTtcbiAgYm9yZGVyOiAycHggc29saWQgIzc1MDUyZDtcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xuYDtcblxuY29uc3QgZXhwbGljYXRpb24gPSBjc3NgXG4gIGZvbnQtc2l6ZTogMThweDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjVmNTtcbiAgcGFkZGluZzogNXB4O1xuICBib3JkZXItcmFkaXVzOiA1cHg7XG4gIGZsZXg6IDE7XG5gO1xuXG5jb25zdCBsaW5rU3R5bGUgPSBjc3NgXG4gIGNvbG9yOiAjNzUwNTJkO1xuYDtcblxuY29uc3QgYXJpYW5lID0gY3NzYFxuICBmb250LXNpemU6IDEycHg7XG4gIG1hcmdpbi1ib3R0b206IDVweDtcbmA7XG5cbmNvbnN0IGltYWdlQ29udGFpbmVyID0gY3NzYFxuICBtYXJnaW46IDEwcHg7XG5gO1xuXG5jb25zdCBwYXJhZ3JhcGggPSBjc3NgXG4gIG1hcmdpbi10b3A6IDVweDtcbiAgbWFyZ2luLWJvdHRvbTogNXB4O1xuICBwYWRkaW5nOiA1cHg7XG5gO1xuXG5jb25zdCBJbWFnZVdpdGhMZWdlbmQgPSAoeyBzcmMsIGxhYmVsIH06IHsgc3JjOiBzdHJpbmc7IGxhYmVsPzogc3RyaW5nIH0pID0+IChcbiAgPGRpdiBjbGFzc05hbWU9e2ltYWdlQ29udGFpbmVyfT5cbiAgICA8aW1nIHNyYz17c3JjfSBhbHQ9XCJyZWlucyBiYWJvdWluIG9saXZlXCIgY2xhc3NOYW1lPXtpbWFnZU1lc3VyZX0gLz5cbiAgICB7bGFiZWwgJiYgKFxuICAgICAgPGRpdiBzdHlsZT17eyBjb2xvcjogJ2dyZXknLCB0ZXh0QWxpZ246ICdjZW50ZXInIH19PlxuICAgICAgICA8aT57bGFiZWx9PC9pPlxuICAgICAgPC9kaXY+XG4gICAgKX1cbiAgPC9kaXY+XG4pO1xuXG5jb25zdCBSYXRlRGF0YSA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGV9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2NvbnRlbnR9PlxuICAgICAgICA8VGl0bGU+XG4gICAgICAgICAgRXhhbWVuIMOpY2hvZ3JhcGhpcXVlIGRlIGwnYXBwYXJlaWwgZXh0cmEtZGlnZXN0aWYgZHUgYmFib3VpbiBvbGl2ZXsnICd9XG4gICAgICAgICAgPGk+KFBhcGlvIGFudWJpcyk8L2k+XG4gICAgICAgIDwvVGl0bGU+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXthcmlhbmV9PlxuICAgICAgICAgIDxMaW5rIHRvPVwiL1wiIGNsYXNzTmFtZT17bGlua1N0eWxlfT5cbiAgICAgICAgICAgIEFjY3VlaWxcbiAgICAgICAgICA8L0xpbms+eycgJ31cbiAgICAgICAgICAveycgJ31cbiAgICAgICAgICA8TGluayB0bz1cInVyaW5haXJlXCIgY2xhc3NOYW1lPXtsaW5rU3R5bGV9PlxuICAgICAgICAgICAgRXhhbWVuIMOpY2hvZ3JhcGhpcXVlIGRlIGwnYXBwYXJlaWwgZXh0cmEtZGlnZXN0aWYgZHUgYmFib3VpbiBvbGl2ZVxuICAgICAgICAgIDwvTGluaz57JyAnfVxuICAgICAgICAgIC8gRG9ubsOpZXMgw6ljaG9ncmFwaGlxdWUgZGUgbGEgcmF0ZVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPFNwYWNpbmcuSGVpZ2h0Lk0gLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2V4cGxpY2F0aW9ufT5cbiAgICAgICAgICA8aDM+UmFwcG9ydCBldCB0b3BvZ3JhcGhpZTwvaDM+XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPXtwYXJhZ3JhcGh9PlxuICAgICAgICAgICAgQ3JhzIJuaW8tbWXMgWRpYWxlbWVudCwgbGEgcmF0ZSBlc3QgZW4gY29udGFjdCBkaXJlY3QgZXQgc3lzdGXMgW1hdGlxdWVcbiAgICAgICAgICAgIGF2ZWMgbOKAmWVzdG9tYWMsIGVuIGxvbmdlYW50IHNvbiBmdW5kdXMuXG4gICAgICAgICAgPC9wPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT17cGFyYWdyYXBofT5cbiAgICAgICAgICAgIENhdWRhbGVtZW50LCBlbGxlIGRlzIFwYXNzZSByZcyBZ3VsaWXMgHJlbWVudCBsZSByZWluIGdhdWNoZVxuICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8cCBjbGFzc05hbWU9e3BhcmFncmFwaH0+XG4gICAgICAgICAgICBMYSBwbHVwYXJ0IGR1IHRlbXBzLCBsYSBxdWV1ZSBkdSBwYW5jcmXMgWFzIHNlIHJldHJvdXZlIGVudHJlIGxhIGZhY2VcbiAgICAgICAgICAgIGNhdWRvLW1lzIFkaWFsZSBkZSBsYSByYXRlIGV0IGxlIHBvzIJsZSBjcmHMgm5pYWwgZHUgcmVpbiBnYXVjaGUuXG4gICAgICAgICAgICBUb3V0ZWZvaXMsIGxhIGJhc2UgZGUgbGEgcmF0ZSBlc3QgcmVsYXRpdmVtZW50IG1vYmlsZSBldCBlbGxlIG7igJllc3RcbiAgICAgICAgICAgIHBhcyBzeXN0ZcyBbWF0aXF1ZW1lbnQgZW4gY29udGFjdCBhdmVjIGxlIHBhbmNyZcyBYXMuXG4gICAgICAgICAgPC9wPlxuXG4gICAgICAgICAgPGgzPkZvcm1lIGRlIGxhIHJhdGU8L2gzPlxuICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgIDxsaT5MYSBmb3JtZSBnbG9iYWxlIGRlIGxhIHJhdGUgc+KAmWFwcGFyZW50ZSBhzIAgdW5lIGxhbmd1ZS48L2xpPlxuICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICBFbiByZcyBZ2lvbiBtZcyBZGlhbGUsIHVuZSBjb3VwZSB0cmFuc3ZlcnNhbGUgZGUgbGEgYmFzZSBkZSBsYSByYXRlXG4gICAgICAgICAgICAgIG1ldCBlbiBlzIF2aWRlbmNlIHVuZSBmb3JtZSBkZSBxdWFydCBkZSBkaXNxdWUsIHBsdXMgb3UgbW9pbnNcbiAgICAgICAgICAgICAgZ2xvYnVsZXVzZS5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgIEEgbWVzdXJlIHF1ZSBsYSBzb25kZSBz4oCZYXBwcm9jaGUgZGUgbOKAmWFwZXgsIGVsbGUgc+KAmWFtZW51aXNlIHBvdXJcbiAgICAgICAgICAgICAgZGV2ZW5pciB0cmlhbmd1bGFpcmUsIHB1aXMgb3ZvacyIZGUgbGF0ZcyBcmFsZW1lbnQuXG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICBQbHVzaWV1cnMgaGlsZXMgc3BsZcyBbmlxdWVzIHNvbnQgaWRlbnRpZmllzIFzIGxlIGxvbmcgZGUgbGEgZmFjZVxuICAgICAgICAgICAgICBnYXN0cmlxdWUsIHNvdXZlbnQgb2JzZXJ2ZcyBcyBhdSBub21icmUgZGUgdHJvaXMgbWFpcyBjZWxhIHJlc3RlXG4gICAgICAgICAgICAgIHZhcmlhYmxlIChkZXV4IG91IHF1YXRyZSBjaGV6IGNlcnRhaW5zIGluZGl2aWR1cykuXG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgIDwvdWw+XG5cbiAgICAgICAgICA8aDM+QXNwZWN0cyDDqWNob2dyYXBoaXF1ZXM8L2gzPlxuICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgIDxsaT5DYXBzdWxlIHNwbGXMgW5pcXVlIGVzdCBmaW5lIGV0IHJlzIFndWxpZcyAcmUuPC9saT5cbiAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgUGFyZW5jaHltZSBzcGzDqW5pcXVlIHBldSBob21vZ2XMgG5lLCBk4oCZZcyBY2hvc3RydWN0dXJlIGZpbmVtZW50XG4gICAgICAgICAgICAgIGdyYW51bGV1c2UgYXZlYyBkZXMgZm95ZXJzIGh5cGVyZcyBY2hvZ2XMgG5lcy5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgIFVuIFByw6lkaXNwb3NpdGlvbiBkZXMgbcOibGVzIMOgIHVuIMOpcGFuY2hlbWVudCBzb3VzLWNhcHN1bGFpcmUuXG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgIDwvdWw+XG5cbiAgICAgICAgICA8aDM+TWVzdXJlIGRlIGzigJnDqXBhaXNzZXVyIGRlIGxhIHJhdGU8L2gzPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT17cGFyYWdyYXBofT5cbiAgICAgICAgICAgIE1lc3VyZSBkZSBs4oCZZcyBcGFpc3NldXIgZGUgbGEgcmF0ZSBlc3QgZWZmZWN0dWXMgWUgZW4gdXRpbGlzYW50IGxhIGNvdXBlXG4gICAgICAgICAgICBwYXNzYW50IHBhciBsZXMgaGlsZXMgc3Bsw6luaXF1ZXMsIGxlIGxvbmcgZGUgbOKAmWFyYyBjb3N0YWwuIExhIHJhdGVcbiAgICAgICAgICAgIGVzdCBhbG9ycyBjb3VwZcyBZSBkYW5zIHNhIGxvbmd1ZXVyIGV0IG9uIGNoZXJjaGUgYcyAIHBhc3NlciBwYXIgbGUgaGlsZVxuICAgICAgICAgICAgbGUgcGx1cyBjYXVkYWwsIGRvbm5hbnQgbOKAmWXMgXBhaXNzZXVyIGxhIHBsdXMgaW1wb3J0YW50ZS4gQ2V0dGVcbiAgICAgICAgICAgIG1hbmlwdWxhdGlvbiBlc3QgcmVsYXRpdmVtZW50IHJlcHJvZHVjdGlibGUuXG4gICAgICAgICAgPC9wPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT17cGFyYWdyYXBofT5cbiAgICAgICAgICAgIElsIG7igJlleGlzdGUgcGFzIGRlIGRpZmZlzIFyZW5jZSBzaWduaWZpY2F0aXZlIGVudHJlIGxlIG1hzIJsZSBldCBsYVxuICAgICAgICAgICAgZmVtZWxsZS5cbiAgICAgICAgICA8L3A+XG4gICAgICAgICAgPEltYWdlV2l0aExlZ2VuZCBzcmM9e21lc3VyZXJhdGUxfSAvPlxuICAgICAgICAgIDxJbWFnZVdpdGhMZWdlbmQgc3JjPXttZXN1cmVyYXRlMn0gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJhdGVEYXRhO1xuIl19*/